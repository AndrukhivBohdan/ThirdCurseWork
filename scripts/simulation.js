// === simulation.js ===

// –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤
let allItems = [];
let buyersGlobal = [];
let simulationTimeouts = [];
let simulationRunning = false;
let simulationInterrupted = false;
let skipAnimation = false;

function loadAllItems(callback) {
  $ajaxUtils.sendGetRequest("data/categories.json", function (categories) {
    let remaining = categories.length;

    if (remaining === 0) {
      if (callback) callback();
      return;
    }

    categories.forEach((cat) => {
      const url = `data/catalog/${cat.short_name}.json`;
      $ajaxUtils.sendGetRequest(url, function (catalogData) {
        const items = catalogData.catalog_items.map((item) => {
          item.categoryShort = cat.short_name;
          item.categoryName = cat.CategoryName;
          return item;
        });

        allItems = allItems.concat(items);
        remaining--;

        if (remaining === 0 && callback) {
          callback();
        }
      });
    });
  });
}

// –°–∏–º—É–ª—è—Ü—ñ—è –¥–ª—è –≤—Å—ñ—Ö –ø–æ–∫—É–ø—Ü—ñ–≤
function simulateBuyerPurchase(buyer) {
  if (!allItems || allItems.length === 0) {
    console.warn("‚ùå –¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞–±–æ –º–∞—Å–∏–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!");
    return;
  }
  for (let i = 0; i < buyer.viewLimit; i++) {
    const randomItem = allItems[Math.floor(Math.random() * allItems.length)];
    const categoryType = randomItem.category_type || "no_discount";

    if (buyer.decideToBuy(categoryType)) {
      buyer.buy(randomItem);
    }
  }
}

function simulateBuyers(buyerCount) {
  const buyers = [];
  for (let i = 0; i < buyerCount; i++) {
    const buyer = BuyerFactory.createBuyer();
    simulateBuyerPurchase(buyer);
    buyers.push(buyer);
  }
  return buyers;
}

// === –í—ñ–∑—É–∞–ª—å–Ω–∞ —Å–∏–º—É–ª—è—Ü—ñ—è (—ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥) ===

function startSim(buyerCount) {
  if (simulationRunning) {
    alert("–°–∏–º—É–ª—è—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è.");
    return;
  }
  simulationRunning = true;
  simulationInterrupted = false;
  skipAnimation = false;
  buyersGlobal = [];

  const container = document.getElementById("buyers-container");
  const queues = document.querySelectorAll('.queue');
  container.innerHTML = "";
  document.querySelectorAll(".simulation-stats, .simulation-analysis").forEach(el => el.remove());

  loadAllItems(() => {
    if (!allItems || allItems.length === 0) {
      alert("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó.");
      simulationRunning = false;
      return;
    }

    buyersGlobal = simulateBuyers(buyerCount);

    if (skipAnimation) {
      if (!simulationInterrupted) {
        renderPurchaseStats(buyersGlobal);
        renderBuyerAnalysis(buyersGlobal);
      }
      simulationRunning = false;
      return;
    }

    let completedBuyers = 0;

    for (let i = 0; i < buyerCount; i++) {
      if (simulationInterrupted) break;

      const el = document.createElement("div");
      el.classList.add("entering-buyer");
      makeBuyerRemovable(el);

      const offset = Math.floor(Math.random() * 40) - 20;
      el.style.left = `calc(50% + ${offset}px)`;

      const timeoutId = setTimeout(() => {
        if (simulationInterrupted || skipAnimation) return;

        container.appendChild(el);
        el.style.animation = "moveUp 3s linear forwards";

        el.addEventListener("animationend", () => {
          el.remove();
          setTimeout(() => {
            if (simulationInterrupted || skipAnimation) return;
            moveToQueue(queues, () => {
              completedBuyers++;
              if (completedBuyers === buyerCount && !simulationInterrupted && !skipAnimation) {
                renderPurchaseStats(buyersGlobal);
                renderBuyerAnalysis(buyersGlobal);
                simulationRunning = false;
              }
            });
          }, 300 + Math.random() * 1000);
        });
      }, i * 400);
      simulationTimeouts.push(timeoutId);
    }
  });
}

function simulateBuyers(buyerCount) {
  const buyers = [];
  for (let i = 0; i < buyerCount; i++) {
    const buyer = BuyerFactory.createBuyer();
    simulateBuyerPurchase(buyer);
    buyers.push(buyer);
  }
  return buyers;
}

function moveToQueue(queues, onComplete) {
  if (simulationInterrupted) return;
  const buyer = document.createElement("div");
  buyer.classList.add("buyer");
  makeBuyerRemovable(buyer);

  const targetQueue = Array.from(queues).reduce((shortest, current) =>
    current.children.length < shortest.children.length ? current : shortest
  );

  targetQueue.appendChild(buyer);
  positionBuyersInQueue(targetQueue);
  handleQueue(targetQueue, onComplete);
}

function positionBuyersInQueue(queue) {
  const buyers = queue.querySelectorAll(".buyer");
  buyers.forEach((buyer, index) => {
    buyer.style.position = "absolute";
    buyer.style.left = "50%";
    buyer.style.transform = "translateX(-50%)";
    buyer.style.bottom = `${index * 35}px`;
  });
}

function handleQueue(queue, onComplete) {
  if (simulationInterrupted) return;
  if (queue.dataset.serving === "true") return;

  const buyer = queue.querySelector('.buyer');
  if (!buyer) return;

  queue.dataset.serving = "true";

  const store = document.getElementById("store-layout");
  const buyerRect = buyer.getBoundingClientRect();
  const storeRect = store.getBoundingClientRect();

  const initialLeft = buyerRect.left - storeRect.left;
  const initialTop = buyerRect.top - storeRect.top;

  const movingBuyer = document.createElement("div");
  movingBuyer.className = "buyer";
  movingBuyer.style.position = "absolute";
  makeBuyerRemovable(buyer);
  movingBuyer.style.left = `${initialLeft}px`;
  movingBuyer.style.top = `${initialTop}px`;

  store.appendChild(movingBuyer);
  buyer.remove();

  const cashier = queue.parentElement.querySelector('.cashier');
  const cashierRect = cashier.getBoundingClientRect();

  const targetLeft = cashierRect.left + cashierRect.width / 2 - storeRect.left - 10;
  const targetTop = cashierRect.top + cashierRect.height / 2 - storeRect.top - 10;

  movingBuyer.style.transition = "transform 1s linear";
  const dx = targetLeft - initialLeft;
  const dy = targetTop - initialTop;
  movingBuyer.style.transform = `translate(${dx}px, ${dy}px)`;

  const serviceTime = 2000 + Math.random() * 5000;
  setTimeout(() => {
    const finalLeft = initialLeft + dx;
    const finalTop = initialTop + dy;

    movingBuyer.style.transition = "none";
    movingBuyer.style.transform = "none";
    movingBuyer.style.left = `${finalLeft}px`;
    movingBuyer.style.top = `${finalTop}px`;

    requestAnimationFrame(() => {
      movingBuyer.style.transition = "top 1.5s linear";
      movingBuyer.style.top = `${finalTop + 200}px`;
    });

    setTimeout(() => {
      movingBuyer.remove();
      queue.dataset.serving = "false";
      positionBuyersInQueue(queue);
      handleQueue(queue, onComplete);

      if (onComplete) onComplete();
    }, 1700);
  }, serviceTime);
}

function makeBuyerRemovable(buyer) {
  buyer.addEventListener("click", () => {
    buyer.remove();
  });
}
function renderPurchaseStats(buyers) {
  if (simulationInterrupted) return;
  const stats = {
    big_discount: 0,
    discount: 0,
    new: 0,
    no_discount: 0,
  };

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ —Ç–∏–ø–æ–º
  buyers.forEach((buyer) => {
    buyer.purchasedItems.forEach((item) => {
      const type = item.category_type || "no_discount";
      if (stats.hasOwnProperty(type)) {
        stats[type]++;
      }
    });
  });

  // –ù–∞–∑–≤–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const typeLabels = {
    big_discount: "–¢–æ–≤–∞—Ä –∑ –≤–µ–ª–∏–∫–æ—é –∑–Ω–∏–∂–∫–æ—é",
    discount: "–¢–æ–≤–∞—Ä –∑—ñ –∑–Ω–∏–∂–∫–æ—é",
    new: "–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä",
    no_discount: "–¢–æ–≤–∞—Ä –±–µ–∑ –∑–Ω–∏–∂–∫–∏",
  };
    const oldStats = document.querySelector(".simulation-stats");
        const oldAnalys = document.querySelector(".simulation-analysis");
  if (oldStats) {
    oldStats.remove();
    oldAnalys.remove();
  }
  

  // –ü–æ–±—É–¥–æ–≤–∞ HTML-—Ç–∞–±–ª–∏—Ü—ñ –∑ –∫–ª–∞—Å–æ–º –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
  let tableHtml = `
    <div class="simulation-stats mt-5">
      <h3 class="mb-3">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó</h3>
      <table class="table table-bordered">
        <thead class="table-light">
          <tr>
            <th>–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É</th>
            <th>–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
          </tr>
        </thead>
        <tbody>
  `;

  for (const type in stats) {
    tableHtml += `
      <tr>
        <td>${typeLabels[type]}</td>
        <td>${stats[type]}</td>
      </tr>
    `;
  }

  tableHtml += `
        </tbody>
      </table>
    </div>
  `;

  // –í—Å—Ç–∞–≤–∏—Ç–∏ –≤ DOM
  const container = document.getElementById("main-content");
  container.insertAdjacentHTML("beforeend", tableHtml);

  // –ê–Ω—ñ–º–∞—Ü—ñ–π–Ω–µ –∑'—è–≤–ª–µ–Ω–Ω—è (–¥–æ–¥–∞—î—Ç—å—Å—è –∫–ª–∞—Å .show)
  const statBlock = container.querySelector(".simulation-stats");
  setTimeout(() => {
    statBlock.classList.add("show");
  }, 50);
}
function renderBuyerAnalysis(buyers) {
  if (simulationInterrupted) return;
  const counts = {
    –Ü–º–ø—É–ª—å—Å–∏–≤–Ω–∏–π: 0,
    –ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π: 0,
    –û–±–µ—Ä–µ–∂–Ω–∏–π: 0
  };

  buyers.forEach(b => {
    const type = guessBuyerType(b);
    counts[type]++;
  });

  const total = buyers.length;
  const impulsiveRatio = counts.–Ü–º–ø—É–ª—å—Å–∏–≤–Ω–∏–π / total;
  const cautiousRatio = counts.–û–±–µ—Ä–µ–∂–Ω–∏–π / total;
  const balancedRatio = counts.–ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π / total;

  let conclusion = "";

  if (impulsiveRatio >= 0.5 && impulsiveRatio > cautiousRatio && impulsiveRatio > balancedRatio) {
    conclusion = `
      üîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–∫–∞–∑—É—î, —â–æ –±—ñ–ª—å—à—ñ—Å—Ç—å –ø–æ–∫—É–ø—Ü—ñ–≤ —î <b>—ñ–º–ø—É–ª—å—Å–∏–≤–Ω–∏–º–∏</b>.
      –¶–µ –≤–∫–∞–∑—É—î –Ω–∞ —Ç–µ, —â–æ –∑–Ω–∏–∂–∫–∏, –Ω–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏ –∞–±–æ —è—Å–∫—Ä–∞–≤–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è —Ç–æ–≤–∞—Ä—É —Å–∏–ª—å–Ω–æ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤.
      –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —Ä–æ–±–∏—Ç–∏ –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏—Ö –∞–∫—Ü—ñ—è—Ö, –≤—ñ—Ç—Ä–∏–Ω–∞—Ö, —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è—Ö —Ç–∞ —è—Å–∫—Ä–∞–≤–∏—Ö –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö —É –º–∞–≥–∞–∑–∏–Ω—ñ.
    `;
  } else if (cautiousRatio >= 0.5 && cautiousRatio > impulsiveRatio && cautiousRatio > balancedRatio) {
    conclusion = `
      üîç –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–≤–∞–∂–∞–Ω–Ω—è <b>–æ–±–µ—Ä–µ–∂–Ω–∏—Ö</b> –ø–æ–∫—É–ø—Ü—ñ–≤.
      –¢–∞–∫—ñ –∫–ª—ñ—î–Ω—Ç–∏ –∫—É–ø—É—é—Ç—å —Ä—ñ–¥—à–µ, –æ–±–∏—Ä–∞—é—Ç—å –ø–µ—Ä–µ–≤–∞–∂–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –∞–±–æ –¥—É–∂–µ –∑–Ω–∏–∂–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏.
      –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –Ω–∞–¥–∞–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, —á—ñ—Ç–∫–µ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è, –∞ —Ç–∞–∫–æ–∂ –ø—ñ–¥–∫—Ä–µ—Å–ª—é–≤–∞—Ç–∏ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å —ñ –≥–∞—Ä–∞–Ω—Ç—ñ—ó.
    `;
  } else if (balancedRatio >= 0.5 && balancedRatio > impulsiveRatio && balancedRatio > cautiousRatio) {
    conclusion = `
      üîç –ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –ø–æ–∫—É–ø—Ü—ñ–≤ –≤–∏–≥–ª—è–¥–∞—î <b>–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ—é</b>.
      –ü–æ–∫—É–ø—Ü—ñ —Ä–æ–±–ª—è—Ç—å –≤–∏–±—ñ—Ä –æ–±–¥—É–º–∞–Ω–æ, —á–∞—Å—Ç–∫–æ–≤–æ –æ—Ä—ñ—î–Ω—Ç—É—é—á–∏—Å—å –Ω–∞ –∑–Ω–∏–∂–∫–∏, –∞–ª–µ –Ω–µ —É–Ω–∏–∫–∞—é—á–∏ –Ω–æ–≤–∏—Ö —á–∏ –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.
      –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –ø–æ—î–¥–Ω—É–≤–∞—Ç–∏ –∑–Ω–∏–∂–∫–∏, –Ω–æ–≤–∏–Ω–∫–∏ —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç ‚Äî –≤–æ–Ω–∏ –æ—Ü—ñ–Ω—è—Ç—å –≥–Ω—É—á–∫—ñ—Å—Ç—å —ñ –ª–æ–≥—ñ—á–Ω—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—é.
    `;
  } else {
    conclusion = `
      üîç –ö–ª—ñ—î–Ω—Ç—Å—å–∫–∞ –±–∞–∑–∞ –≤–∏–≥–ª—è–¥–∞—î <b>–∑–º—ñ—à–∞–Ω–æ—é</b> ‚Äî –Ω–µ–º–∞—î —á—ñ—Ç–∫–æ –¥–æ–º—ñ–Ω—É—é—á–æ—ó –≥—Ä—É–ø–∏.
      –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –ø—Ä–∏—Ö–æ–¥—è—Ç—å –ø–æ–∫—É–ø—Ü—ñ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏.
      –í–∞—Ä—Ç–æ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –º—ñ–∂ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º, —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—é —Ü—ñ–Ω —Ç–∞ –≥–Ω—É—á–∫—ñ—Å—Ç—é –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É.
    `;
  }

  const analysisHtml = `
    <div class="mt-4 p-3 border rounded bg-light shadow-sm text-dark simulation-analysis">
      <h4>üß† –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–µ –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è:</h4>
      <p>${conclusion}</p>
    </div>
  `;

  const container = document.getElementById("main-content");
  container.insertAdjacentHTML("beforeend", analysisHtml);
}

function guessBuyerType(buyer) {
  const stats = buyer.purchaseStats;
  if (!stats || !stats.totalViewed || !stats.categoryTypes) {
    return "–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π";
  }

  const ratio = stats.totalBought / stats.totalViewed;
  const types = stats.categoryTypes;

  const dominantType = Object.entries(types).sort((a, b) => b[1] - a[1])[0][0];

  if (ratio >= 0.6 && (dominantType === "new" || dominantType === "no_discount")) {
    return "–Ü–º–ø—É–ª—å—Å–∏–≤–Ω–∏–π";
  } else if (ratio >= 0.3 && (dominantType === "discount" || dominantType === "big_discount")) {
    return "–ó–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π";
  } else {
    return "–û–±–µ—Ä–µ–∂–Ω–∏–π";
  }
}
